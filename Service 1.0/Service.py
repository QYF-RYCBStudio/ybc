import ybc_box as box
import ybc_face as fa
import ybc_animal as ani
import ybc_funny as fun
import ybc_speech as spe
import ybc_imgcar as car
import ybc_browser as br
import ybc_qrcode as qr
import ybc_turtle
import ybc_history as hi


while True:
    box.msgbox('欢迎使用小猿自动服务机','小猿.jpg')
    op = box.buttonbox('请选择需要的服务',['翻译','二维码','识别人脸','魔法融合','识别动物','识别汽车','听笑话/绕口令','浏览器','绘图','历史上的今天','查星座','不需要，退出'],'ybc 选择窗口')
    if op == '二维码':
        q = box.buttonbox('请进一步选择',['制作','解码'],'ybc 选择窗口')
        if q == '制作':
            e = box.enterbox('请输入要藏在二维码里面的文字：','小猿.jpg','ybc 选择窗口','请输入文字')
            qrc = qr.make(e)
            box.msgbox('二维码新鲜出炉 ~~ 扫一扫吧~',qrc)
        elif q == '解码':
            file1 = box.fileopenbox('请选择需要解码的图片','ybc 选择窗口')
            text2 = qr.decode(file1)
            box.msgbox(text2,qrc)
    elif op == '识别人脸':
        pic = box.fileopenbox('请选择需要识别的图片','ybc 选择窗口')
        g = fa.gender(pic)
        a = fa.age(pic)
        b = fa.beauty(pic)
        box.msgbox('正在加载中，请稍候···','进度条.gif')
        box.msgbox('结果：',pic)
        spe.speak('结果：',3)
        box.msgbox('性别：' + str(g),pic)
        spe.speak('性别：' + str(g),3)
        box.msgbox('年龄：' + str(a),pic)
        spe.speak('年龄：' + str(a),3)
        box.msgbox('颜值：' + str(b) + '分',pic)
        spe.speak('颜值：' + str(b) + '分',3)
        box.msgbox('感谢使用','小猿.jpg')
        sco = box.intbox('请给我评分（分值 0~100）')
        f = open('score.txt','a')
        f.write(str(sco))
        f.close
    elif op == '魔法融合':
        pic1 = box.fileopenbox('请选择需要融合的图片','ybc 选择窗口')
        n = box.enterbox('请输入背景图片的编号','效果图.jpg','输入窗口','请输入数字')
        m = fa.mofa(pic1,int(n))
        box.msgbox('正在加载中，请稍候···','进度条.gif')
        box.msgbox('请观赏',m)
        box.msgbox('感谢使用','小猿.jpg')
        sco = box.intbox('请给我评分（分值 0~100）')
        f = open('score.txt','a')
        f.write(str(sco))
    elif op == '识别动物':
        pic2 = box.fileopenbox('请选择需要识别的图片','ybc 选择窗口')
        w = ani.what(pic2)
        b = ani.breed(pic2)
        box.msgbox('正在加载中，请稍候···','进度条.gif')
        box.msgbox('结果：',pic2)
        spe.speak('结果：',3)
        box.msgbox('种类：' + str(w),pic2)
        spe.speak('种类：' + str(w),3)
        box.msgbox('品种：' + str(b),pic2)
        spe.speak('品种：' + str(b),3)
        box.msgbox('感谢使用','小猿.jpg')
        sco = box.intbox('请给我评分（分值 0~100）')
        f = open('score.txt','a')
        f.write(str(sco))
        f.close
    elif op == '听笑话/绕口令':
        o = box.buttonbox('请选择具体功能',['笑话','绕口令'],'ybc 选择窗口')
        if o == '笑话':
            x = fun.xiaohua()
            box.msgbox(x,'小猿.jpg')
            spe.speak(x,3)
            box.msgbox('感谢使用','小猿.jpg')
            sco = box.intbox('请给我评分（分值 0~100）')
            f = open('score.txt','a')
            f.write(str(sco))
            f.close
        elif o == '绕口令':
            r = fun.raokouling()
            box.msgbox(r,'小猿.jpg')
            spe.speak(r,3)
            box.msgbox('感谢使用','小猿.jpg')
            sco = box.intbox('请给我评分（分值 0~100）')
            f = open('score.txt','a')
            f.write(str(sco))
            f.close
    elif op == '识别汽车':
        file = box.fileopenbox('请选择需要识别的图片','ybc 选择窗口')
        c = car.car_recognition(file)
        box.msgbox(c,file)
        spe.speak(c,3)
        box.msgbox('感谢使用','小猿.jpg')
        sco = box.intbox('请给我评分（分值 0~100）')
        f = open('score.txt','a')
        f.write(str(sco))
        f.close
    elif op == '浏览器':
        url = box.enterbox('请输入网址(URL)','小猿.jpg','ybc 输入窗口','请输入内容')
        br.open(url)
    elif op == '绘图':
        ybc_turtle.penup()
        ybc_turtle.goto(100,200)
        ybc_turtle.pendown()
        ybc_turtle.color('green')
        ybc_turtle.speed('normal')
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(5)
        ybc_turtle.right(90)
        ybc_turtle.forward(1)
        ybc_turtle.penup()
        ybc_turtle.goto(-100,-200)
        ybc_turtle.pendown()
        ybc_turtle.color('red')
        ybc_turtle.speed('normal')
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(5)
        ybc_turtle.right(90)
        ybc_turtle.forward(1)
        ybc_turtle.penup()
        ybc_turtle.goto(-200,200)
        ybc_turtle.pendown()
        ybc_turtle.color('yellow')
        ybc_turtle.speed('normal')
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(5)
        ybc_turtle.right(90)
        ybc_turtle.forward(1)
        ybc_turtle.penup()
        ybc_turtle.goto(200,-200)
        ybc_turtle.pendown()
        ybc_turtle.color('blue')
        ybc_turtle.speed('normal')
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(5)
        ybc_turtle.right(90)
        ybc_turtle.forward(1)
        ybc_turtle.penup()
        ybc_turtle.goto(-50,50)
        ybc_turtle.pendown()
        ybc_turtle.color('black')
        ybc_turtle.speed('normal')
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(5)
        ybc_turtle.right(90)
        ybc_turtle.forward(1)
        ybc_turtle.penup()
        ybc_turtle.goto(-250,-50)
        ybc_turtle.pendown()
        ybc_turtle.color('orange')
        ybc_turtle.speed('normal')
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(5)
        ybc_turtle.right(90)
        ybc_turtle.forward(1)
        ybc_turtle.penup()
        ybc_turtle.goto(250,50)
        ybc_turtle.pendown()
        ybc_turtle.color('brown')
        ybc_turtle.speed('normal')
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(100)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(90)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(80)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(70)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(60)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(50)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(40)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(30)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(20)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(10)
        ybc_turtle.right(90)
        ybc_turtle.forward(5)
        ybc_turtle.right(90)
        ybc_turtle.forward(1)
        ybc_turtle.penup()
        ybc_turtle.goto(0,0)
        ybc_turtle.done()
        spe.speak('已完成绘画！')
    elif op == '翻译': 
        op = box.buttonbox('请选择你要完成的操作',['英译中','中译英','退出'],'ybc 选择')
        settings = 0
        if op == '退出' or op == None:
            print('执行退出')
            while settings == 3:
                print('执行中 .')
                print('执行中 ..')
                print('执行中 ...')
                settings = settings + 1
            print('执行成功！')
            break
        elif op == '英译中':
            print('执行英译中操作')
            while settings == 3:
                print('加载模块中.')
                print('加载模块中..')
                print('加载模块中...')
                settings = settings + 1
            import ybc_trans as trans
            settings = 0
            print('加载模块成功！')
            while settings == 3:
                print('加载功能中.')
                print('加载功能中..')
                print('加载功能中...')
                settings = settings + 1
            print('加载功能成功！')
            res = box.enterbox('请输入你要翻译的英文','小猿.jpg',' ybc 输入窗口','例如：hello')
            zh = trans.en2zh(res)
            box.msgbox('翻译结果：' + zh)
            sco = box.intbox('请给我评分（分值 0~100）')
            f = open('score.txt','a')
            f.write(str(sco))
            f.close
        elif op == '中译英':
            settings == 0
            box.msgbox('执行中译英操作')
            while settings == 3:
                print('加载模块中.')
                print('加载模块中..')
                print('加载模块中...')
                settings = settings + 1
            import ybc_trans as trans
            settings = 0
            print('加载模块成功！')
            while settings == 3:
                print('加载功能中.')
                print('加载功能中..')
                print('加载功能中...')
                settings = settings + 1
            print('加载功能成功！')
            res = box.enterbox('请输入你要翻译的中文','小猿.jpg',' ybc 输入窗口','例如：你好')
            en = trans.zh2en(res)
            box.msgbox('翻译结果：' + en)
            sco = box.intbox('请给我评分（分值 0~100）')
            f = open('score.txt','a')
            f.write(str(sco))
            f.close
    elif op == '历史上的今天':
        month = box.enterbox('请输入要查看的月份')
        day = box.enterbox('请输入要查看的日期')
        info = hi.history_info(month,day)
        box.msgbox('请查看 历史上的今天       ' + str(info))
        sco = box.intbox('请给我评分（分值 0~100）')
        f = open('score.txt','a')
        f.write(str(sco))
        f.close
    
    elif op == '不需要，退出':
        res = box.ynbox('确定退出吗？')
        if res or res == None:
            box.msgbox('感谢使用','小猿.jpg')
            break   
        else:
            box.msgbox('Error:APP Crashed,You can reload this APP.','error.png')
            break